// <auto-generated />
using System;
using Manager.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Manager.Infrastructure.Migrations
{
    [DbContext(typeof(ManagerDbContext))]
    [Migration("20230106185823_Publish")]
    partial class Publish
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Manager.Domain.Entities.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Filter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("Manager.Domain.Entities.FilterOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FilterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FilterId");

                    b.ToTable("FilterOptions");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Keyword", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("Manager.Domain.Entities.KeywordGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForProduct")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("KeywordGroups");
                });

            modelBuilder.Entity("Manager.Domain.Entities.KeywordGroupBelongingToProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KeywordGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "KeywordGroupId");

                    b.HasIndex("KeywordGroupId");

                    b.ToTable("KeywordGroupsBelongingToProduct");
                });

            modelBuilder.Entity("Manager.Domain.Entities.KeywordInKeywordGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KeywordGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KeywordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("KeywordGroupId");

                    b.HasIndex("KeywordId");

                    b.ToTable("KeywordsInKeywordGroup");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Media", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageAnySize")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ImageAnySizeHeight")
                        .HasColumnType("int");

                    b.Property<int>("ImageAnySizeWidth")
                        .HasColumnType("int");

                    b.Property<string>("ImageLg")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ImageLgHeight")
                        .HasColumnType("int");

                    b.Property<int>("ImageLgWidth")
                        .HasColumnType("int");

                    b.Property<string>("ImageMd")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ImageMdHeight")
                        .HasColumnType("int");

                    b.Property<int>("ImageMdWidth")
                        .HasColumnType("int");

                    b.Property<string>("ImageSm")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ImageSmHeight")
                        .HasColumnType("int");

                    b.Property<int>("ImageSmWidth")
                        .HasColumnType("int");

                    b.Property<int>("MediaType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ThumbnailHeight")
                        .HasColumnType("int");

                    b.Property<int>("ThumbnailWidth")
                        .HasColumnType("int");

                    b.Property<string>("VideoId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("VideoType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Niche", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Niches");
                });

            modelBuilder.Entity("Manager.Domain.Entities.NotificationEmployeeNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NotificationGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NotificationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("NotificationEmployeeNotes");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("PageType")
                        .HasColumnType("int");

                    b.Property<string>("UrlName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Manager.Domain.Entities.PageKeyword", b =>
                {
                    b.Property<Guid>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KeywordInKeywordGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PageId", "KeywordInKeywordGroupId");

                    b.HasIndex("KeywordInKeywordGroupId");

                    b.ToTable("PageKeywords");
                });

            modelBuilder.Entity("Manager.Domain.Entities.PageKeywordGroup", b =>
                {
                    b.Property<Guid>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KeywordGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PageId", "KeywordGroupId");

                    b.HasIndex("KeywordGroupId");

                    b.ToTable("PageKeywordGroups");
                });

            modelBuilder.Entity("Manager.Domain.Entities.PageSubniche", b =>
                {
                    b.Property<Guid>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SubnicheId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PageId", "SubnicheId");

                    b.HasIndex("SubnicheId");

                    b.ToTable("PageSubniches");
                });

            modelBuilder.Entity("Manager.Domain.Entities.PricePoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Header")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductPriceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Quantity")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ShippingType")
                        .HasColumnType("int");

                    b.Property<string>("StrikethroughPrice")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Unit")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("UnitPrice")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductPriceId");

                    b.ToTable("PricePoints");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("Hoplink")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("ShippingType")
                        .HasColumnType("int");

                    b.Property<Guid>("SubnicheId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("VendorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("SubnicheId");

                    b.HasIndex("VendorId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Manager.Domain.Entities.ProductFilter", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FilterOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "FilterOptionId");

                    b.HasIndex("FilterOptionId");

                    b.ToTable("ProductFilters");
                });

            modelBuilder.Entity("Manager.Domain.Entities.ProductGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ProductGroups");
                });

            modelBuilder.Entity("Manager.Domain.Entities.ProductInProductGroup", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "ProductGroupId");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductsInProductGroup");
                });

            modelBuilder.Entity("Manager.Domain.Entities.ProductKeyword", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("KeywordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProductId", "KeywordId");

                    b.HasIndex("KeywordId");

                    b.ToTable("ProductKeywords");
                });

            modelBuilder.Entity("Manager.Domain.Entities.ProductMedia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<Guid?>("MediaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductMedia");
                });

            modelBuilder.Entity("Manager.Domain.Entities.ProductPrice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Publish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PublishStatus")
                        .HasColumnType("int");

                    b.Property<int>("PublishType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EmailId");

                    b.HasIndex("PageId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Publishes");
                });

            modelBuilder.Entity("Manager.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Subniche", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("NicheId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UrlName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NicheId");

                    b.ToTable("Subniches");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Subproduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Subproducts");
                });

            modelBuilder.Entity("Manager.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Image")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Manager.Domain.Entities.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PrimaryEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PrimaryFirstName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PrimaryLastName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Manager.Domain.Entities.FilterOption", b =>
                {
                    b.HasOne("Manager.Domain.Entities.Filter", "Filter")
                        .WithMany()
                        .HasForeignKey("FilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filter");
                });

            modelBuilder.Entity("Manager.Domain.Entities.KeywordGroupBelongingToProduct", b =>
                {
                    b.HasOne("Manager.Domain.Entities.KeywordGroup", "KeywordGroup")
                        .WithMany("KeywordGroupsBelongingToProduct")
                        .HasForeignKey("KeywordGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manager.Domain.Entities.Product", "Product")
                        .WithMany("KeywordGroupsBelongingToProduct")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeywordGroup");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Manager.Domain.Entities.KeywordInKeywordGroup", b =>
                {
                    b.HasOne("Manager.Domain.Entities.KeywordGroup", "KeywordGroup")
                        .WithMany("KeywordsInKeywordGroup")
                        .HasForeignKey("KeywordGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manager.Domain.Entities.Keyword", "Keyword")
                        .WithMany("KeywordsInKeywordGroup")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("KeywordGroup");
                });

            modelBuilder.Entity("Manager.Domain.Entities.NotificationEmployeeNote", b =>
                {
                    b.HasOne("Manager.Domain.Entities.User", "User")
                        .WithMany("NotificationEmployeeNotes")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Manager.Domain.Entities.PageKeyword", b =>
                {
                    b.HasOne("Manager.Domain.Entities.KeywordInKeywordGroup", "KeywordInKeywordGroup")
                        .WithMany("PageKeywords")
                        .HasForeignKey("KeywordInKeywordGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manager.Domain.Entities.Page", "Page")
                        .WithMany("PageKeywords")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeywordInKeywordGroup");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Manager.Domain.Entities.PageKeywordGroup", b =>
                {
                    b.HasOne("Manager.Domain.Entities.KeywordGroup", "KeywordGroup")
                        .WithMany()
                        .HasForeignKey("KeywordGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manager.Domain.Entities.Page", "Page")
                        .WithMany("PageKeywordGroups")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KeywordGroup");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Manager.Domain.Entities.PageSubniche", b =>
                {
                    b.HasOne("Manager.Domain.Entities.Page", "Page")
                        .WithMany("PageSubniches")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manager.Domain.Entities.Subniche", "Subniche")
                        .WithMany()
                        .HasForeignKey("SubnicheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");

                    b.Navigation("Subniche");
                });

            modelBuilder.Entity("Manager.Domain.Entities.PricePoint", b =>
                {
                    b.HasOne("Manager.Domain.Entities.Media", "Media")
                        .WithMany("PricePoints")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Manager.Domain.Entities.Product", "Product")
                        .WithMany("PricePoints")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manager.Domain.Entities.ProductPrice", "ProductPrice")
                        .WithMany("PricePoints")
                        .HasForeignKey("ProductPriceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsOne("Shared.Common.ValueObjects.RecurringPayment", "RecurringPayment", b1 =>
                        {
                            b1.Property<Guid>("PricePointId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("RebillFrequency")
                                .HasColumnType("int")
                                .HasColumnName("RebillFrequency");

                            b1.Property<double>("RecurringPrice")
                                .HasColumnType("float")
                                .HasColumnName("RecurringPrice");

                            b1.Property<int>("SubscriptionDuration")
                                .HasColumnType("int")
                                .HasColumnName("SubscriptionDuration");

                            b1.Property<int>("TimeFrameBetweenRebill")
                                .HasColumnType("int")
                                .HasColumnName("TimeFrameBetweenRebill");

                            b1.Property<int>("TrialPeriod")
                                .HasColumnType("int")
                                .HasColumnName("TrialPeriod");

                            b1.HasKey("PricePointId");

                            b1.ToTable("PricePoints");

                            b1.WithOwner()
                                .HasForeignKey("PricePointId");
                        });

                    b.Navigation("Media");

                    b.Navigation("Product");

                    b.Navigation("ProductPrice");

                    b.Navigation("RecurringPayment")
                        .IsRequired();
                });

            modelBuilder.Entity("Manager.Domain.Entities.Product", b =>
                {
                    b.HasOne("Manager.Domain.Entities.Media", "Media")
                        .WithMany("Products")
                        .HasForeignKey("ImageId");

                    b.HasOne("Manager.Domain.Entities.Subniche", "Subniche")
                        .WithMany()
                        .HasForeignKey("SubnicheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manager.Domain.Entities.Vendor", "Vendor")
                        .WithMany("Products")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Shared.Common.ValueObjects.RecurringPayment", "RecurringPayment", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("RebillFrequency")
                                .HasColumnType("int")
                                .HasColumnName("RebillFrequency");

                            b1.Property<double>("RecurringPrice")
                                .HasColumnType("float")
                                .HasColumnName("RecurringPrice");

                            b1.Property<int>("SubscriptionDuration")
                                .HasColumnType("int")
                                .HasColumnName("SubscriptionDuration");

                            b1.Property<int>("TimeFrameBetweenRebill")
                                .HasColumnType("int")
                                .HasColumnName("TimeFrameBetweenRebill");

                            b1.Property<int>("TrialPeriod")
                                .HasColumnType("int")
                                .HasColumnName("TrialPeriod");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("Media");

                    b.Navigation("RecurringPayment")
                        .IsRequired();

                    b.Navigation("Subniche");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("Manager.Domain.Entities.ProductFilter", b =>
                {
                    b.HasOne("Manager.Domain.Entities.FilterOption", "FilterOption")
                        .WithMany("ProductFilters")
                        .HasForeignKey("FilterOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilterOption");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Manager.Domain.Entities.ProductInProductGroup", b =>
                {
                    b.HasOne("Manager.Domain.Entities.ProductGroup", "ProductGroup")
                        .WithMany("ProductsInProductGroup")
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manager.Domain.Entities.Product", "Product")
                        .WithMany("ProductsInProductGroup")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("Manager.Domain.Entities.ProductKeyword", b =>
                {
                    b.HasOne("Manager.Domain.Entities.Keyword", "Keyword")
                        .WithMany("ProductKeywords")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manager.Domain.Entities.Product", "Product")
                        .WithMany("ProductKeywords")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Keyword");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Manager.Domain.Entities.ProductMedia", b =>
                {
                    b.HasOne("Manager.Domain.Entities.Media", "Media")
                        .WithMany("ProductMedia")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Manager.Domain.Entities.Product", "Product")
                        .WithMany("ProductMedia")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Manager.Domain.Entities.ProductPrice", b =>
                {
                    b.HasOne("Manager.Domain.Entities.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Publish", b =>
                {
                    b.HasOne("Manager.Domain.Entities.Email", "Email")
                        .WithMany("Publishes")
                        .HasForeignKey("EmailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Manager.Domain.Entities.Page", "Page")
                        .WithMany("Publishes")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Manager.Domain.Entities.Product", "Product")
                        .WithMany("Publishes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Manager.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Email");

                    b.Navigation("Page");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Manager.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Manager.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Subniche", b =>
                {
                    b.HasOne("Manager.Domain.Entities.Niche", "Niche")
                        .WithMany()
                        .HasForeignKey("NicheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Niche");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Subproduct", b =>
                {
                    b.HasOne("Manager.Domain.Entities.Media", "Media")
                        .WithMany("Subproducts")
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Manager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Manager.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Manager.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Manager.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Manager.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Manager.Domain.Entities.Email", b =>
                {
                    b.Navigation("Publishes");
                });

            modelBuilder.Entity("Manager.Domain.Entities.FilterOption", b =>
                {
                    b.Navigation("ProductFilters");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Keyword", b =>
                {
                    b.Navigation("KeywordsInKeywordGroup");

                    b.Navigation("ProductKeywords");
                });

            modelBuilder.Entity("Manager.Domain.Entities.KeywordGroup", b =>
                {
                    b.Navigation("KeywordGroupsBelongingToProduct");

                    b.Navigation("KeywordsInKeywordGroup");
                });

            modelBuilder.Entity("Manager.Domain.Entities.KeywordInKeywordGroup", b =>
                {
                    b.Navigation("PageKeywords");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Media", b =>
                {
                    b.Navigation("PricePoints");

                    b.Navigation("ProductMedia");

                    b.Navigation("Products");

                    b.Navigation("Subproducts");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Page", b =>
                {
                    b.Navigation("PageKeywordGroups");

                    b.Navigation("PageKeywords");

                    b.Navigation("PageSubniches");

                    b.Navigation("Publishes");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Product", b =>
                {
                    b.Navigation("KeywordGroupsBelongingToProduct");

                    b.Navigation("PricePoints");

                    b.Navigation("ProductKeywords");

                    b.Navigation("ProductMedia");

                    b.Navigation("ProductPrices");

                    b.Navigation("ProductsInProductGroup");

                    b.Navigation("Publishes");
                });

            modelBuilder.Entity("Manager.Domain.Entities.ProductGroup", b =>
                {
                    b.Navigation("ProductsInProductGroup");
                });

            modelBuilder.Entity("Manager.Domain.Entities.ProductPrice", b =>
                {
                    b.Navigation("PricePoints");
                });

            modelBuilder.Entity("Manager.Domain.Entities.User", b =>
                {
                    b.Navigation("NotificationEmployeeNotes");
                });

            modelBuilder.Entity("Manager.Domain.Entities.Vendor", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
